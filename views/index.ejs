<!doctype html>
<html lang="en">
	<head>
		<title>O'Reilly Introduction to WebRTC</title>
		<link rel="stylesheet" type="text/css" href="styles.css">
		<script src="/socket.io/socket.io.js"></script>
	</head>
	<body>
        <p>my:</p>
		<video id="myVideoTag" autoplay></video>
        <p>friend:</p>
		<video id="theirVideoTag" autoplay></video>
		<div>
			<label>Your Name</label><input id="myName" type="text"/>
			<label>Message</label><input id="myMessage" type="text"/>
			<input id="sendMessage" type="submit"/>
			<div id="chatArea">Message Output:<br/></div>
			<div id="signalingArea">Signaling Messages:<br/></div>
		</div>
		
		<script>
			var myVideoArea = document.querySelector("#myVideoTag")
			var theirVideoArea = document.querySelector("#theirVideoTag")
			var myName = document.querySelector("#myName")
			var myMessage = document.querySelector("#myMessage")
			var sendMessage = document.querySelector("#sendMessage")
			var chatArea = document.querySelector("#chatArea")
			var signalingArea = document.querySelector("#signalingArea")
			var ROOM = "chat"
			var SIGNAL_ROOM = "signal_room"
			var configuration = {
				'iceServers': [{
					'url': 'stun:stun.l.google.com:19302'
				}]
			}
			var rtcPeerConn
			
			io = io.connect()
			io.emit('ready', {"chat_room": ROOM, "signal_room": SIGNAL_ROOM})

			io.emit('signal',{"type":"user_here", "message":"Are you ready for a call?", "room":SIGNAL_ROOM})
			
			io.on('signaling_message', function(data) {
				displaySignalMessage("Signal received: " + data.type)

				if (!rtcPeerConn)
					startSignaling()
					
				if (data.type != "user_here") {
					var message = JSON.parse(data.message)
					if (message.sdp) {
						rtcPeerConn.setRemoteDescription(new RTCSessionDescription(message.sdp)).then(function () {

							if (rtcPeerConn.remoteDescription.type == 'offer') {
                                rtcPeerConn.createAnswer().then(sendLocalDesc, logError)
							}
						}).catch(logError)
					}
					else {
                        rtcPeerConn.addIceCandidate(new RTCIceCandidate(message.candidate)).then(() => {
                            console.log('addIceCandidate')
                        })
					}
				}
				
			})
			
			function startSignaling() {
				displaySignalMessage("starting signaling...")
				
				rtcPeerConn = new webkitRTCPeerConnection(configuration)

				rtcPeerConn.onicecandidate = function (evt) {
					if (evt.candidate)
						io.emit('signal',{"type":"ice candidate", "message": JSON.stringify({ 'candidate': evt.candidate }), "room":SIGNAL_ROOM})
					displaySignalMessage("completed that ice candidate...")
				}
				

				rtcPeerConn.onnegotiationneeded = function () {
					displaySignalMessage("on negotiation called")

                    rtcPeerConn.createOffer().then(sendLocalDesc, logError)
				}
				

				rtcPeerConn.onaddstream = function (evt) {
					displaySignalMessage("going to add their stream...")
                    theirVideoArea.srcObject = evt.stream
				}
				

				navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia
				navigator.getUserMedia({
					'audio': false,
					'video': true
				}, function (stream) {
					displaySignalMessage("going to display my stream...")
					myVideoArea.srcObject = stream
					rtcPeerConn.addStream(stream)
				}, logError)
			  
			}
			
			function sendLocalDesc(desc) {

                rtcPeerConn.setLocalDescription(desc).then(() => {
                    displaySignalMessage("sending local description")
                    io.emit('signal',{"type":"SDP", "message": JSON.stringify({ 'sdp': rtcPeerConn.localDescription }), "room":SIGNAL_ROOM})
                }).catch(logError)
			}
			
			function logError(error) {
				displaySignalMessage(error.name + ': ' + error.message)
			}
			
			io.on('announce', function(data) {
				displayMessage(data.message)
			})
			
			io.on('message', function(data) {
				displayMessage(data.author + ": " + data.message)
			})
			
			function displayMessage(message) {
				chatArea.innerHTML = chatArea.innerHTML + "<br/>" + message
			}
			
			function displaySignalMessage(message) {
				signalingArea.innerHTML = signalingArea.innerHTML + "<br/>" + message
			}
			
			sendMessage.addEventListener('click', function(ev){
				io.emit('send', {"author":myName.value, "message":myMessage.value, "room":ROOM})
				ev.preventDefault()
			}, false)
			
			
			
		</script>
	</body>
</html>